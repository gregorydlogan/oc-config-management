---
# This playbook deploys a full Opencast cluster from packages

- hosts: all
  user: "{{ ansible_user }}"
  tasks:
    - name: Autocorrect major version for Amazon, NA -> 7
      set_fact: ansible_distribution_major_version="7"
      when: ansible_distribution == 'Amazon'

# Create the Opencast user on the appropriate nodes

- hosts: fileserver,opencast
  user: "{{ ansible_user }}"
  
  roles:
    - { role: opencast-create-user, become: yes }

# Add the Opencast repo to the appropriate nodes

- hosts: opensearch, opencast
  user: "{{ ansible_user }}"
  
  roles:
    - { role: opencast-packages-repo-setup }

# Install the fileserver, if appropriate

- hosts: fileserver
  user: "{{ ansible_user }}"

  roles:
    - { role: geerlingguy.nfs, when: handle_network_mounts | default(true), become: yes }

# Install the database, if appropriate, and configure it

- hosts: database
  user: "{{ ansible_user }}"

  roles:
    - { role: geerlingguy.mysql, when: install_mariadb | default(true), become: yes }
    - { role: mariadb-config }

# Install nginx, if appropriate

- hosts: nginx
  user: "{{ ansible_user }}"
  roles:
    - { role: geerlingguy.certbot, when: handle_https | default(true), become: yes }
    - { role: nginxinc.nginx, when: install_nginx | default(true), become: yes }
    - { role: nginx-dhparam, when: install_nginx | default(true), become: yes }
    - { role: nginxinc.nginx_config, when: install_nginx | default(true), become: yes }
  vars_files:
    - group_vars/nginx.yml

# Install opensearch, if appropriate

- hosts: opensearch
  user: "{{ ansible_user }}"

  roles:
    - { role: opensearch, when: install_opensearch | default(true) }


# Install and configure Opencast

- hosts: opencast
  user: "{{ ansible_user }}"

  roles:
    - { role: opencast-shims }
    - { role: nfs-client, when: handle_network_mounts | default(true) }
    - { role: packaged-opencast-runtime-deps }
    - { role: opencast-source-install, tags: [ quick ] }
    - { role: opencast-config, tags: [ quick ] }
    - { role: aws-ami, tags: "ami", when: build_ami | default(false) }

